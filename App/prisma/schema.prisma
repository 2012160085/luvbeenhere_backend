// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int                @id @default(autoincrement())
  name               String
  username           String             @unique
  phone              String             @unique
  password           String
  avatar             String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  couple             Couple?            @relation(fields: [coupleId], references: [id])
  coupleId           Int?
  sendedInvitation   CoupleInvitation[] @relation(name: "sender")
  receivedInvitation CoupleInvitation[] @relation(name: "receiver")
  Like               Like[]
}

model Couple {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]
  date      MDate[]
  name      String
}

model MDate {
  id         Int          @id @default(autoincrement())
  name       String
  datetime   DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  visits     Visit[]
  couple     Couple       @relation(fields: [coupleId], references: [id])
  coupleId   Int
  posX       Float?
  posY       Float?
  tag        Tag[]
  weatherTag WeatherTag[]
  price      Int?
  isPublic   Boolean?     @default(false)

  @@unique([datetime, coupleId])
}

model Visit {
  id        Int      @id @default(autoincrement())
  name      String
  date      MDate    @relation(fields: [dateId], references: [id])
  place     Place?   @relation(fields: [placeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dateId    Int
  placeId   Int?
  photos    Photo[]
  rating    Rating?
  posX      Float?
  posY      Float?
  comment   String?
  advantage String?
  shortage  String?
  price     Int?
  datetime  DateTime
  isPublic  Boolean? @default(false)
  rgeocode  String?
  likes     Like[]
}

model Tag {
  id   Int     @id @default(autoincrement())
  name String  @unique
  date MDate[]
}

model WeatherTag {
  id   Int     @id @default(autoincrement())
  name String  @unique
  date MDate[]
}

model Place {
  id        Int      @id @default(autoincrement())
  name      String
  posX      Float
  posY      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visits    Visit[]
  rgeocode  String?
}

model Photo {
  id        Int       @id @default(autoincrement())
  posX      Float?
  posY      Float?
  file      String
  datetime  DateTime?
  visit     Visit     @relation(fields: [visitId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  visitId   Int
  comment   String?
  rgeocode  String?
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  visit     Visit    @relation(fields: [visitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visitId   Int      @unique
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Visit     Visit?   @relation(fields: [visitId], references: [id])
  visitId   Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model CoupleInvitation {
  id         Int      @id @default(autoincrement())
  sender     User     @relation(fields: [senderId], references: [id], name: "sender")
  receiver   User     @relation(fields: [receiverId], references: [id], name: "receiver")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   Int
  receiverId Int

  @@unique([senderId, receiverId])
}

model PhoneVerification {
  id        Int      @id @default(autoincrement())
  auth      String
  phone     String
  verfied   Boolean  @default(false)
  token     String
  createdAt DateTime @default(now())
}

model WeatherStation {
  id        Int       @id
  name      String
  altitude  Int
  address   String
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  Weather   Weather[]
}

model Weather {
  id               Int            @id @default(autoincrement())
  station          WeatherStation @relation(fields: [weatherStationId], references: [id])
  weatherStationId Int
  rainy            Int?
  prcpt15m         Int?
  prcpt60m         Int?
  prcpt3h          Int?
  prcpt6h          Int?
  prcpt12h         Int?
  prcpt24h         Int?
  temp             Float?
  windSpeed1h      Float?
  windSpeed10h     Float?
  humidity         Int?
  pressure         Float?
  observedAt       DateTime
  createdAt        DateTime       @default(now())
}
